// server-side
import express from 'express'
import path from 'path'
import compression from 'compression'
// client-side
import React from 'react'
import { renderToString } from 'react-dom/server'
import { match, RouterContext } from 'react-router'
import routes from './app/routes'

// setup express
let app = express()
let PORT = process.env.PORT || 8080

// used by react router's match() for server-side rendering
const renderPage = function (appHtml) {
  return (
    `
    <!DOCTYPE html>
        <head>
            <meta charset="utf-8">
            <meta http-equiv="X-UA-Compatible" content="IE=edge">
            <title>Forecaster</title>
            <meta name="description" content="">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <link rel="stylesheet" href="https://bootswatch.com/yeti/bootstrap.min.css">
        </head>
        <body>
        
        <div id="app">${appHtml}</div>

        <script src="https://use.fontawesome.com/63d289309a.js"></script>
        <script src="/bundle.js"></script>
        </body>
    </html>
    `
  )
}

// gzip files
app.use(compression())

// serve static files
app.use(express.static(path.join(__dirname, 'dist')))

// all requests sent to index.html string
// React Router handles the rest through browserHistory
app.get('*', (req, res) => {
  match({ routes: routes, location: req.url }, (error, redirectLocation, renderProps) => {

    if (error) {
      // error found
      res.status(500).send(error.message)
    } else if (redirectLocation) {
      // redirecting not allowed
      // res.redirect(redirect.pathname + redirect.search)
      res.status(500).send("Unable to redirect")
    } else if (renderProps) {
      // route matches
      // RouterContext renders the component tree for the route
      const appHtml = renderToString(<RouterContext {...renderProps}/>)
      // respond with dom string generated by react
      res.send(renderPage(appHtml))
    } else {
      // no match for the route
      res.status(404).send('Page not found.')
    }

  })
})

app.listen(PORT, function() {
  console.log('server running at localhost:'+PORT)
})
